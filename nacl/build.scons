#! -*- python -*-
#
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

from os import path
from glob import glob
import re

def lib_files(src_dir, exclude=[], patt="*.c"):
    c_files = glob(path.join(src_dir, patt))
    skip = lambda f: any((re.search(patt, f) for patt in exclude))
    return [f for f in c_files if not skip(f)]

def prefix_files(prefix, files):
    return [path.join(prefix, f) for f in files]


lua_src = path.join("lua-5.1.5", "src")
lua_files = lib_files(lua_src, [
    r"lua\.c$",
    r"luac\.c$"
])

lua_cjson_src = "lua-cjson-2.1.0"
lua_cjson_files = lib_files(lua_cjson_src, [
    r"g_fmt\.c$",
    r"dtoa\.c$"
])

aroma_src = "src"
aroma_files = prefix_files(aroma_src, [
    "nacl/aroma.cpp",
    "nacl/renderer.cpp",
    "nacl/gl_context.cpp",
    "shader.cpp"
])

import make_nacl_env
import nacl_utils

nacl_env = make_nacl_env.NaClEnvironment(
    use_c_plus_plus_libs=True, nacl_platform=os.getenv('NACL_TARGET_PLATFORM'))


# nacl_env.AllNaClStaticLibraries(lua_files, "lua")

sources = lua_files + lua_cjson_files + aroma_files

nacl_env.Append(CPPPATH=[lua_src, lua_cjson_src, aroma_src, "."])
nacl_env.Append(CPPDEFINES=["AROMA_NACL"])
nacl_env.Append(LIBS=["nosys", "ppapi_gles2"])
nacl_env.AllNaClModules(sources, 'aroma')
